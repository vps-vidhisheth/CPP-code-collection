//Divide Two Integers without using multiplication, division, and mod //operator

#include <iostream>
#include <limits.h>

class Solution {
public:
    int divide(int dividend, int divisor) {
        // Handle special case where overflow can occur
        if (dividend == INT_MIN && divisor == -1) {
            return INT_MAX; // Overflow case
        }

        // Determine the sign of the quotient
        int sign = ((dividend < 0) ^ (divisor < 0)) ? -1 : 1;

        // Convert both dividend and divisor to positive values
        long long abs_dividend = labs(dividend);
        long long abs_divisor = labs(divisor);
        
        long long quotient = 0;

        // Subtract the divisor from the dividend while possible
        while (abs_dividend >= abs_divisor) {
            long long temp = abs_divisor, multiple = 1;
            
            // Double the divisor until it is larger than the remaining dividend
            while (abs_dividend >= (temp << 1)) {
                temp <<= 1;
                multiple <<= 1;
            }
            
            abs_dividend -= temp;
            quotient += multiple;
        }

        // Apply the sign to the quotient
        long long result = sign * quotient;
        
        // Check for overflow before returning the result
        if (result > INT_MAX) return INT_MAX;
        if (result < INT_MIN) return INT_MIN;

        return static_cast<int>(result);
    }
};
