//Unique Paths
#include <vector>

class Solution {
public:
    int uniquePaths(int m, int n) {
        // Create a 2D dp array initialized with 0
        std::vector<std::vector<int>> dp(m, std::vector<int>(n, 0));
        
        // Set the number of ways to reach any cell in the first row or first column to 1
        for (int i = 0; i < m; i++) {
            dp[i][0] = 1;
        }
        for (int j = 0; j < n; j++) {
            dp[0][j] = 1;
        }
        
        // Fill the dp array using the transition relation
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        
        // The bottom-right corner will have the number of unique paths
        return dp[m-1][n-1];
    }
};
